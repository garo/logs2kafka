package main

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestMessageVerifier(t *testing.T) {

	m := JSONToMessage("{\"level\":\"DEBUG\",\"msg\":\"Hello, World!\\n\"}")
	err := m.ParseJSON()
	assert.Nil(t, err)

	value, ok := m.Container.Path("msg").Data().(string)
	assert.Equal(t, ok, true)
	assert.Equal(t, value, "Hello, World!\n")

	value, ok = m.Container.Path("level").Data().(string)
	assert.Equal(t, ok, true)
	assert.Equal(t, value, "DEBUG")

}

func TestEnsureMessageTimestamp(t *testing.T) {

	m := JSONToMessage("{\"level\":\"DEBUG\",\"msg\":\"Hello, World!\\n\"}")
	err := m.ParseJSON()
	assert.Nil(t, err)

	err = EnsureMessageTimestamp(&m)
	assert.Nil(t, err)

	_, ok := m.Container.Path("ts").Data().(string)
	assert.Equal(t, ok, true)
}

func TestEnsureMessageLevel(t *testing.T) {

	m := JSONToMessage("{\"level\":\"DEBUG\",\"msg\":\"Hello, World!\\n\"}")
	err := m.ParseJSON()
	assert.Nil(t, err)

	err = EnsureMessageLevel(&m)
	assert.Nil(t, err)

	value, ok := m.Container.Path("level").Data().(string)
	assert.Equal(t, ok, true)
	assert.Equal(t, value, "DEBUG")
}

func TestEnsureMessageLevel2(t *testing.T) {

	m := JSONToMessage("{\"level\":\"AAA\",\"msg\":\"Hello, World!\\n\"}")
	err := m.ParseJSON()
	assert.Nil(t, err)

	err = EnsureMessageLevel(&m)
	assert.Nil(t, err)

	value, ok := m.Container.Path("level").Data().(string)
	assert.Equal(t, ok, true)
	assert.Equal(t, value, "UNKNOWN")
}

func TestEnsureMessageLevel_LowerCaseLevel(t *testing.T) {

	m := JSONToMessage("{\"level\":\"debug\",\"msg\":\"Hello, World!\\n\"}")
	err := m.ParseJSON()
	assert.Nil(t, err)

	err = EnsureMessageLevel(&m)
	assert.Nil(t, err)

	value, ok := m.Container.Path("level").Data().(string)
	assert.Equal(t, ok, true)
	assert.Equal(t, value, "DEBUG")
}

func TestEnsureMessageLevel_WarningIsConvertedToWARN(t *testing.T) {

	m := JSONToMessage("{\"level\":\"warning\",\"msg\":\"Hello, World!\\n\"}")
	err := m.ParseJSON()
	assert.Nil(t, err)

	err = EnsureMessageLevel(&m)
	assert.Nil(t, err)

	value, ok := m.Container.Path("level").Data().(string)
	assert.Equal(t, ok, true)
	assert.Equal(t, value, "WARN")
}

func TestEnsureMessageService(t *testing.T) {

	m := JSONToMessage("{\"container_name\":\"foobar\"}")
	err := m.ParseJSON()
	assert.Nil(t, err)

	err = EnsureMessageService(&m)
	assert.Nil(t, err)

	value, ok := m.Container.Path("service").Data().(string)
	assert.Equal(t, ok, true)
	assert.Equal(t, value, "foobar")
	assert.Equal(t, m.Topic, "foobar")
}

func TestEnsureMessageServiceNothing(t *testing.T) {

	m := JSONToMessage("{}")
	err := m.ParseJSON()
	assert.Nil(t, err)

	err = EnsureMessageService(&m)
	assert.Nil(t, err)

	_, ok := m.Container.Path("service").Data().(string)
	assert.Equal(t, ok, false)
	assert.Equal(t, m.Topic, "")
}

func TestEnsureMessageServiceWithServiceName(t *testing.T) {

	m := JSONToMessage("{\"container_name\":\"foobar\",\"service\":\"myservice\"}")
	err := m.ParseJSON()
	assert.Nil(t, err)

	err = EnsureMessageService(&m)
	assert.Nil(t, err)

	value, ok := m.Container.Path("service").Data().(string)
	assert.Equal(t, ok, true)
	assert.Equal(t, value, "myservice")
	assert.Equal(t, m.Topic, "myservice")
}

func TestEnsureMessageServiceWithKubernetesLabel(t *testing.T) {

	m := JSONToMessage("{\"container_name\":\"foobar\",\"_io.kubernetes.container.name\":\"myservice\"}")
	err := m.ParseJSON()
	assert.Nil(t, err)

	err = EnsureMessageService(&m)
	assert.Nil(t, err)

	value, ok := m.Container.Path("service").Data().(string)
	assert.Equal(t, ok, true)
	assert.Equal(t, value, "myservice")
	
	assert.Equal(t, m.Topic, "myservice")
}

func TestEnsureMessageServiceAutogeneratedName(t *testing.T) {

	m := JSONToMessage("{\"container_name\":\"evil_elon\"}")
	err := m.ParseJSON()
	assert.Nil(t, err)

	err = EnsureMessageService(&m)
	assert.Nil(t, err)

	_, ok := m.Container.Path("service").Data().(string)
	assert.Equal(t, ok, false)
}

func TestEnsureMessageServiceAddsHostnameAndServerIP(t *testing.T) {

	i := ServerInfo{}
	i.Hostname = "thehost"
	i.ServerIP = "10.0.0.1"

	m := JSONToMessage("{\"service\":\"myservice\"}")
	err := m.ParseJSON()
	assert.Nil(t, err)

	err = EnsureMessageServiceServerInfo(i, &m)
	assert.Nil(t, err)

	value, ok := m.Container.Path("host").Data().(string)
	assert.Equal(t, ok, true)
	assert.Equal(t, value, "thehost")

	value, ok = m.Container.Path("server_ip").Data().(string)
	assert.Equal(t, ok, true)
	assert.Equal(t, value, "10.0.0.1")
}
